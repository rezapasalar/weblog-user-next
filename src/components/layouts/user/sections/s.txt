
Packages - SWR

1 - Intro Of SWR

------------------------------------------------

ریکت هوک هایی هستش که برای 
Data fetching
استفاده میشود که ما میتونیم 
دیتا هایمان را از 
Api 
ها مختلف دریافت کنیم و در کنار این 
موضوع مورد مهمی هم هست که همیشه 
دیتاهای ما بروز می ماند و این بروز 
ماندن باعث میشود که 
ui
ما همیشه ریکتیو باشد نسبت به دیتایی
که سمت بک اند وجود دارد


------------------------------------------------

مثلا ما درخواست 
api
میدیم برای لاگین و که یک دیتایی
بر اساس جی سون به فرانت برگشت 
داده میشود که حاوی مثلا اطلاعات کاربر 
توکنی که مربوط به کاربر هستش
و مثلا کاربر به چه دوره هایی 
دسترسی دارد حالا ما به هر 
صفحه ای که برویم باید این 
درخواست را مجدد بزنیم تا 
اطلاعات جدید به کاربر نمایش داده شود
یا مثلا همین صفحه هستیم ولی مثلا 
یک روز دست به کامپیوتر نزدیم 
یه جورایی باید هر 20 دقیقه ای دوباره 
درخواست دهیم تا اطلاعات بروز 
بماند ولی میتوان از 
swr
استفاده کنیم

------------------------------------------------

swr
کاری که میکنه اینه که میاد یک 
request
میفرستد و جوابی که میگیرد را 
cache
میکند و 
request
های بعدی رو کاری که کاربر انجام میدهد 
مثلا کاربر میره به یک تب دیگه از بروزر 
و وقتی به این تب بر میگرده دوباره درخواست 
را میفرسته و اگر این پاسخ جدید با مقدار
کش شده متفاوت بود کامپوننت را رفرش کرده و با 
این کار دیتا بروز باقی میماند

------------------------------------------------

error
ها را راحت تر مدیریت کرده و یا 
اون حالت
Real time
را به ما میدهد مثلا ما در صفحه ای هستیم که هنوز لاگین نکردیم
ولی به صفحه دیگری میرویم البته با یک تب جدید
حالا در آن تب لاگین میکنیم ولی در تب قیلی لاگین 
نبودیم حالا 
swr
کاری میکنه که وقتی به تب قیلی 
میرویم لاگین را بروز کرده برای آن صفحه

------------------------------------------------

typescript 
را پشتیبانی میکنه 

pagination
رو داره

در حالت 
ssr ssg
میتونیم ازش استفاده کنیم

وووو

------------------------------------------------

Packages - SWR

2 - Install And First Use

------------------------------------------------

swr 
اصلا چیزی شبیه به 
Axios or fetch
نیست و اصلا کار اونارو انجام نمیدهد

------------------------------------------------

useSWR()
دوتا مقدار میگیرد یکی همان 
url
ما هستش که در واقع یک 
key 
هست که بعدا بهش میرسیم
و دومین پارامتر 
fetcher
ما هستش که میاد این 
url 
یا 
key 
رو برای ما دریافت کند که ما میایم 
تابعی را ایجاد میکنیم و آن را به 
این پارامتر میدهیم

------------------------------------------------

وقتی هم در هسته 
getArticles
اجرا میشود 
key or url
به آن پاس داده میشود

------------------------------------------------

const getArticles = (url) => fetch(url).then(res => res.json())
ما فقط 
Then
اولی را قرا میدهیم که 
رشته رو به 
json
تبدیل میکنیم و 
then
دومی که دریافت دیتا هستش رو خود
swr
هندل میکند

------------------------------------------------

گاهی اوقات در بار اول 
undefined
هستش پس 
null safe
را قرار دهیم بهتره

------------------------------------------------

حالا اصل داستان اینجا اتفاق می افتد
ما وارد تب
network
میشویم ومیبینیم اگر بین تب های 
بروزر سویچ کنیم با هر بار وارد شدن به 
تبی که مقالات وجود دارند میبینیم یک 
Request
به سمت 
api
فرستاده شده که در صورت مقایرت دیتا به 
cache
که
swr
وجود داشته باشد کامپوننت را رفرش کرده پس
دیتا بروز میماند

------------------------------------------------

حالا میریم به یه تب دیگه

------------------------------------------------

حالا بر میگردیم به تب مقالات 
میبینیم در 
network
درخواستی ارسال میشود

------------------------------------------------

در واقع در موارد موردی 
SWR
میاد درخواست مجددی به اون 
key 
یا 
url 
میفرستد

------------------------------------------------

Packages - SWR

3 - SWR Options

------------------------------------------------

برخی اپشن ها

در ارتباط با ساسپنسی که در ریکت 18 به روت ها اضافه شد
suspense = false: enable React Suspense mode (details)

fetcher(args): the fetcher function

به صورت اتوماتیک ریولیدیت شود . یعنی  یه بار دیگه درخواست
بره سمت سرور ببینه جواب با جواب قبلی تفاوت داره یا خیر
stale
به معنی کهنه شدن هستش
revalidateIfStale = true: automatically revalidate even if there is stale data (details)

زمانی که برای بار اول 
swr 
داره در پروژه لانچ میشود که اینیبل هستش
revalidateOnMount: enable or disable automatic revalidation when component is mounted

زمانی که روی تب های بروزر سویچ میکنیم
revalidateOnFocus = true: automatically revalidate when window gets focused (details)

اگر اینترنت قطع شد و وقتی وصل شد درخواست فرستاده شود
revalidateOnReconnect = true: automatically revalidate when the browser regains a network connection (via navigator.onLine) (details)

که به صورت دیفالت صفر هستش 
و ما میتونیم هر چند ثانیه که خواستیم 
درخواست از اول به سمت سرور برود
refreshInterval 


------------------------------------------------

Packages - SWR

4 - Global Config

------------------------------------------------

ما برای همه ریکویست ها که نمیایم از 
swr
استفاده کنیم در برخی که برایمان مهم هستند
و بروز رسانی پاسخ آن ها مهم باشد

------------------------------------------------

حالا ما تنظیماتی داریم که 
در چند جا که از 
swr
استفاده میکنیم تکراری هستش
حالا ما میایم به صورت 
global
طراحی میکنیم

------------------------------------------------

<SWRConfig value={{}}>
را فقط در 
index.js
قرار نیست قرار دهیم ما میتوانیم 
به صورت در ختی در هرجایی 
که خواستیم باز هم قرار دهیم


مثلا در کنار 
index.js
کانفیگ گلوبالی را برای 
پدر کامپوننت های  بخش 
Articles
جداگانه طراحی کنیم

------------------------------------------------

Packages - SWR

5 - Error Handling

------------------------------------------------

به هر دلیلی ممکنه بعد از ارسال 
request
ممکنه خطایی برگشت پیدا کند

------------------------------------------------

اگ هم از 
Axios 
استفاده کردیم در 
try catch 
قرار میدهیم

------------------------------------------------

حالا اگر خطایی بود میتونیم 
یک خروجی را نمایش کاربر بدهیم

------------------------------------------------

ما میتونیم در 
global Config 
خطاهای همه را دریافت کنیم حالا باهاش
هر کاری بخواهیم میکنیم مثلا در 
سمت سرور خطا ها را لاگ گرفته

error , key 
را دریافت میکند

------------------------------------------------

با این کار میتوانیم 
errors
ها را 
track
کنیم

------------------------------------------------

Packages - SWR

6 - Conditional Fetching

------------------------------------------------

دریافت کردن اطلاعات از 
swr
به صورت شرطی

------------------------------------------------

مثلا درخواستی داده شده و به واسطه
جواب آن یک درخواست دیگه ای به یک 
key
دیگه یا همان 
api
دیگه بزنیم

------------------------------------------------

اگر دقت کنید میبینید که در 
swr
دومی وابسته دیتای 
Swr
اولی هستش

------------------------------------------------

درسته که موضوع وابستگی با 
Safe null
حل شده چو در بار اول 
undefine 
میشد و خطا رخ میداد ولی با 
safe null
حل شد

------------------------------------------------

ولی از یه روش دیگه هم میتوان استفاده کرد
به جای پارامتر اول که 
key or url
یک کالبک فانکشن پاس دهیم
که اگر خروجی این کالبک 
null
یا خطا باشد خود 
swr
دیتایی بر نمیگرداند و خطایی هم رخ نمیدهد

------------------------------------------------

پس به راحتی تونستیم 
key 
هایمان را شرطی کنیم

------------------------------------------------

Packages - SWR

7 - Loading

------------------------------------------------

وقتی 
data 
ووووووووووووو				همزمان
error
برای ما 
undefined
باشد یعنی حالت 
loading
هستش

------------------------------------------------

Packages - SWR

8 - Mutation

------------------------------------------------

mutate
به ما کمک میکند که اگر ما داریم 
یه کاری را روی دیتاهای مورد نظر انجام میدیم
بیا و یه بار دیگه ریکوست رو بفرست و آپدیت کن دیتا ها رو

------------------------------------------------

مثلا در اینجا میخواهیم عملیات درج
یک مقالاه را انجام دهیم

------------------------------------------------

حالا با کلیک روی دکمه اضافه شدن 
مقاله صورت میگیرد که اگر ما تب را سویچ کنیم
swr
لیست را رفرش میکند و میتوان دید

------------------------------------------------

ولی خوب ما میخواهیم کاری کنیم که بدون 
سویچ تب یا بروزرسانی دستی این اتفاق 
به صورت اتوماتیک 
swr
برای ما به محض اضافه شدن مقاله 
لیست را بروز کند

------------------------------------------------

پس 
mutate
را از 
Swr
که قراره لیست رو رفرش کنه 
استخراج کرده و در زمانی 
که اضافه شدن مقاله اتفاق افتاد آن 
را صدا زده 
mutate()

------------------------------------------------

نکته
در فیس بوک وقتی پستی را لایک 
میکنیم منتظر نمیماند که بره سمت
سرور و جواب بیاد و بعد لایک اتفاق بیوفتد

تا میزنیم لایک اتفاق می افتد 
و سمت بک گراند این اتفاق میره به سمت سرور
اگر اشتباه بود بعد دیس لایک میشود

------------------------------------------------

حالا همین کار رو میخواهیم انجام دهیم 
دیگه صبر نکنیم تا بره سمت سرور برگرده فعلا 
خودمان لیست را بروز کنیم

------------------------------------------------

در ضمن یه تغییر ریزی هم دادیم
 
------------------------------------------------

حالا بریم و دستی در تابع 
mutate
اطلاعات را بدهیم تا فعلا اللحساب لیست بروز شود

------------------------------------------------

ولی یه مشکلی که هست به محض اجرای 
mutate({})
باز هم درخواست به سمت سرور میرود که ما در 
حالت دستی جلوی آن را میگیریم

------------------------------------------------

البته این کار برای مثال فوق درست نیست
مثلا برای همان 
like 
کردن کاربرد خوبی دارد

------------------------------------------------

Packages - SWR

9 - Arguments

------------------------------------------------
------------------------------------------------
------------------------------------------------
------------------------------------------------